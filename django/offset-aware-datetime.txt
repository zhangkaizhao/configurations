http://stackoverflow.com/a/10653144


Check the thorough document for detail info.

Normally, use django.utils.timezone.now to make an offset-aware current datetime

>>> from django.utils import timezone
>>> timezone.now()
datetime.datetime(2012, 5, 18, 13, 0, 49, 803031, tzinfo=<UTC>)

And django.utils.timezone.make_aware to make an offset-aware datetime

    >>> timezone.make_aware(datetime.datetime.now(), timezone.get_default_timezone())
    datetime.datetime(2012, 5, 18, 21, 5, 53, 266396, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)

You could then compare both offset-aware datetimes w/o trouble.

Furthermore, you could convert offset-awared datetime to offset-naive datetime by stripping off timezone info, then it could be compared w/ normal datetime.datetime.now(), under utc.

    >>> t = timezone.now() # offset-awared datetime
    >>> t.astimezone(timezone.utc).replace(tzinfo=None)
    datetime.datetime(2012, 5, 18, 13, 11, 30, 705324)

USE_TZ is True 'by default' (actually it's False by default, but the settings.py file generated by django-admin.py startproject set it to True), then if your DB supports timezone-aware times, values of time-related model fields would be timezone-aware. you could disable it by setting USE_TZ=False(or simply remove USE_TZ=True) in settings.
shareimprove this answer
    
edited Jun 24 '13 at 5:06

    
answered May 18 '12 at 13:01 

-------------

ref:

* django i18n timezones: https://docs.djangoproject.com/en/dev/topics/i18n/timezones/
